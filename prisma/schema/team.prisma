model Team {
  id           String        @id @default(cuid())
  name         String
  users        UserTeam[]
  documents    Document[]
  folders      Folder[]
  domains      Domain[]
  invitations  Invitation[]
  sentEmails   SentEmail[]
  brand        Brand?
  datarooms    Dataroom[]
  agreements   Agreement[]
  viewerGroups ViewerGroup[]
  viewers      Viewer[]

  permissionGroups  PermissionGroup[]
  linkPresets       LinkPreset[] // Link presets for the team
  incomingWebhooks  IncomingWebhook[]
  restrictedTokens  RestrictedToken[]
  webhooks          Webhook[]
  conversations     Conversation[]
  dataroomFaqItems  DataroomFaqItem[]
  uploadedDocuments DocumentUpload[]
  Tag               Tag[]

  installedIntegrations InstalledIntegration[]

  links Link[]
  views View[]

  plan           String    @default("free")
  stripeId       String?   @unique // Stripe customer ID
  subscriptionId String?   @unique // Stripe subscription ID
  startsAt       DateTime? // Stripe subscription start date
  endsAt         DateTime? // Stripe subscription end date
  pausedAt       DateTime? // When the subscription was paused
  pauseStartsAt  DateTime? // When the pause period starts
  pauseEndsAt    DateTime? // When the pause period ends
  cancelledAt    DateTime? // When the subscription was cancelled

  limits Json? // Plan limits // {datarooms: 1, users: 1, domains: 1, customDomainOnPro: boolean, customDomainInDataroom: boolean}

  // team settings
  enableExcelAdvancedMode Boolean @default(false) // Enable Excel advanced mode for all documents in the team

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ignoredDomains  String[] // Domains that are ignored for the team
  globalBlockList String[] // Email and domains that are blocked for the team
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
}

model UserTeam {
  role   Role   @default(MEMBER)
  status String @default("ACTIVE")
  userId String
  teamId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  blockedAt               DateTime? // When the user was blocked
  notificationPreferences Json? // Format: { yearInReview: { "enabled": false } }

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])
}
